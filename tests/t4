#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import functools
import os
import re
import shlex
import sys
import subprocess
import traceback
from ipaddress import IPv4Address, IPv4Interface, IPv6Address, IPv6Interface


# ###### Dummy function #####################################################
def clear_flag(flag):
   print('clear_flag: ' + flag)


# ###### Dummy function #####################################################
def set_flag(flag):
   print('set_flag: ' + flag)


# ###### Dummy function #####################################################
def status_set(tag, value):
   print('status_set: ' + tag + '=' + value)


# ###### Dummy function #####################################################
def action_set(values):
   print('action_fail: ' + values)


# ###### Dummy function #####################################################
def action_fail(message):
   # Nothing to do!
   pass


# ###### Execute command ####################################################
def execute(commands):
   sys.stdout.write('-----------------------------------------------------------------------------\n')
   sys.stdout.write('time bash -c "' + commands + '"\n')
   return [ ', ' ]


# ###### Run shell commands, handle exceptions, and upage status flags ######
def runShellCommands(commands, comment, actionFlagToClear, successFlagToSet = None):
   status_set('active', comment + ' ...')
   try:
       stdout, stderr = execute(commands)
   except subprocess.CalledProcessError as e:
       exc_type, exc_value, exc_traceback = sys.exc_info()
       err = traceback.format_exception(exc_type, exc_value, exc_traceback)
       message = 'Command execution failed: ' + str(err) + '\nOutput: ' + e.output.decode('utf-8')
       action_fail(message.encode('utf-8'))
       status_set('active', comment + ' COMMANDS FAILED!')
   except:
       exc_type, exc_value, exc_traceback = sys.exc_info()
       err = traceback.format_exception(exc_type, exc_value, exc_traceback)
       action_fail('Command execution failed: ' + str(err))
       status_set('active', comment + ' FAILED!')
   else:
      if successFlagToSet != None:
         set_flag(successFlagToSet)
      # action_set( { 'output': stdout.encode('utf-8') } )
      status_set('active', comment + ' COMPLETED')
   finally:
      clear_flag(actionFlagToClear)


commands = 'date'
runShellCommands(commands, 'prepare_cassandra_hss_build: preparing Cassandra/HSS build',
                 'actions.prepare-cassandra-hss-build', 'hsscharm.prepared-cassandra-hss-build')
